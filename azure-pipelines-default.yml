# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
pool:
  vmImage: 'ubuntu-latest'

trigger:
- develop
- release
- master

pr:
- develop
- master
- release


steps:

#- task: Npm@1
#  inputs:
#    command: 'install'
#- task: Npm@1
#  displayName: 'Run Test'
#  continueOnError: true
#  inputs:
#    command: 'custom'
#    customCommand: 'run test'
#
#- task: PublishTestResults@2
#  displayName: 'Publish Jest Unit Test Results'
#  inputs:
#    testResultsFiles: junit.xml
#    mergeTestResults: true
#    testRunTitle: 'Jest Unit Tests'
#    failTaskOnFailedTests: true
#
#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish Cobertura Coverage Report'
#  inputs:
#    codeCoverageTool: Cobertura
#    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
#     failTaskOnFailedTests: true
#
#- task: SonarCloudPrepare@1
#  displayName: 'Prepare analysis on SonarCloud'
#  inputs:
#    SonarCloud: $(SONAR_ServiceConnection)
#    organization: $(organization_name)
#    scannerMode: 'CLI'
#    configMode: 'manual'
#    cliProjectKey: $(SonarProjectKey)
#    cliProjectName: $(SonarProjectName)
#    cliSources: '.'
#    extraProperties:
#      sonar.javascript.lcov.reportPaths = $(JSCoveragePath)
#
#- task: SonarCloudAnalyze@1
#  displayName: 'Analysis on SonarQube'
#  continueOnError: true
#
#- task: SonarCloudPublish@1
#  displayName: 'Publish Quality Gate Report on SonarQube'
#  continueOnError: true
#  inputs:
#    pollingTimeoutSec: '300'
#
#- task: CmdLine@2
#  displayName: Fortify Scan
#  continueOnError: true
#  inputs:
#    script: |
#      echo Downloading Fortify source
#      sudo mkdir /mnt/devopsfilestoreblob
#      if [ ! -d "/etc/smbcredentials" ]; then
#      sudo mkdir /etc/smbcredentials
#      fi
#      if [ ! -f "/etc/smbcredentials/devopsfilestoreblob.cred" ]; then
#          sudo bash -c 'echo "username=devopsfilestoreblob" >> /etc/smbcredentials/devopsfilestoreblob.cred'
#          sudo bash -c 'echo "password=LkoxjwPzpB42ZyLP0qMbbbk4k0T/25TOD6dCV1RJJK5iccvZ76d/yHc3PLKhKms2EA7hYy691v41RGJq6R9fzQ==" >> /etc/smbcredentials/devopsfilestoreblob.cred'
#      fi
#      sudo chmod 600 /etc/smbcredentials/devopsfilestoreblob.cred
#      sudo bash -c 'echo "//devopsfilestoreblob.file.core.windows.net/fortify /mnt/devopsfilestoreblob cifs nofail,vers=3.0,credentials=/etc/smbcredentials/devopsfilestoreblob.cred,dir_mode=0777,file_mode=0777,serverino" >> /etc/fstab'
#      sudo mount -t cifs //devopsfilestoreblob.file.core.windows.net/fortify /mnt/devopsfilestoreblob -o vers=3.0,credentials=/etc/smbcredentials/devopsfilestoreblob.cred,dir_mode=0777,file_mode=0777,serverino
#      "/mnt/devopsfilestoreblob/Fortify_Linux.sh"
#      echo Updating Security Content
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/fortifyupdate"
#      echo Starting Fortify Scan
#      echo Phase 1: Clean
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/sourceanalyzer" -b $(Build.BuildId) -clean
#      echo Phase 2: Translate
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/sourceanalyzer" -b $(Build.BuildId) "/home/vsts/work/1/s/**/*"
#      echo Phase 3: Scan
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/sourceanalyzer" -b $(Build.BuildId) -scan -f "/home/vsts/work/1/s/$(Build.BuildId).fpr"
#      echo Phase 4: Uploading Results
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/jre/bin/keytool" -import -alias SSC -keystore "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/jre/lib/security/cacerts" -file "/home/vsts/work/1/s/sscemersoncom.crt" -trustcacerts -keypass changeit -storepass changeit -noprompt
#      echo Phase 5 : Convert to pdf
#      /home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/BIRTReportGenerator -template "Developer Workbook" -source /home/vsts/work/1/s/$(Build.BuildId).fpr -format PDF -showSuppressed -output /home/vsts/work/1/s/ConfigitUI_FortifyReport.pdf
#      "/home/vsts/HPE_Fortify/HPE_Fortify_SCA_and_Apps/bin/fortifyclient" uploadFPR -url $(FORTIFY_SERVER_URL) -authtoken $(FORTIFY_AUTH_TOKEN) -f "/home/vsts/work/1/s/$(Build.BuildId).fpr" -application "$(APP_NAME)" -applicationVersion "$(APP_VERSION)"
#
#- task: CopyFiles@2
#  displayName: 'Copy Fortify Report'
#  inputs:
#    contents: /home/vsts/work/1/s/ConfigitUI_FortifyReport.pdf
#    targetFolder: $(Build.ArtifactStagingDirectory)
#
#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Fortify Report Artifact'
#  inputs:
#    pathToPublish: $(Build.ArtifactStagingDirectory)
#    artifactName: FortifyReport

- task: CopyFiles@2
  displayName: 'Copy Terraform Files'
  inputs:
    SourceFolder: 'terraform'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/terraform'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Script'

- task: CopyFiles@2
  displayName: 'Copy Deployment definition File'
  inputs:
    contents: 'deployment.yml'
    targetFolder: $(Build.ArtifactStagingDirectory)
- task: PublishBuildArtifacts@1
  displayName: 'Publish Deployment definition file'

- script: |
      docker build -f docker/prod/Dockerfile -t $(dockerId).azurecr.io/$(imageName):$(Build.BuildId) .
      docker login $(dockerId).azurecr.io -u $(dockerId) -p $pswd
      docker push $(dockerId).azurecr.io/$(imageName):$(Build.BuildId)
  env:
      pswd: $(dockerPassword)
  displayName: 'Build and Push Docker Image'
